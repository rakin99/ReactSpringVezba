{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dejan\\\\Documents\\\\resources\\\\src\\\\NovaProjekcija.jsx\";\nimport React from \"react\";\nimport NovaProjekcijaForm from \"./NovaProjekcijaForm\";\n\nclass NovaProjekcija extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      film: \"\",\n      datumVremePrikazivanja: \"\",\n      tipProjekcije: \"\",\n      sala: \"\",\n      cenaKarte: \"\",\n      sale: [],\n      saleZaIzbor: [],\n      tipoviZaIzbor: [\"2D\", \"3D\", \"4D\"],\n      id: \"\"\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const {\n      film,\n      datumVremePrikazivanja,\n      tipProjekcije,\n      sala,\n      cenaKarte\n    } = this.state;\n\n    if (film === \"\" || datumVremePrikazivanja === \"\" || tipProjekcije === \"\" || sala === \"\" || cenaKarte === \"\") {\n      alert(\"Sva polja moraju biti popunjena!\");\n    } else {\n      const projekcija = {\n        film: this.state.film,\n        tipProjekcije: this.state.tipProjekcije,\n        sala: this.state.sala,\n        cenaKarte: this.state.cenaKarte,\n        napravio: this.props.state.logedUsername,\n        datumVremePrikazivanja: this.state.datumVremePrikazivanja\n      };\n      console.log(JSON.stringify(projekcija));\n      var config = {\n        dataType: 'json',\n        contentType: \"application/json; charset=utf-8\",\n        method: 'post',\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n        },\n        body: JSON.stringify(projekcija)\n      }; // On submit of the form, send a POST request with the data to the server.\n\n      fetch('http://localhost:8080/bioskop/projekcije/add', config).then(res => res.json()).then(res => {\n        console.log(res);\n\n        if (res.result === \"success\") {\n          this.state.sale.map(s => {\n            if (s.id == projekcija.sala) {\n              this.setState({\n                id: res.id,\n                datumVremePrikazivanja: res.datum,\n                sala: s.naziv\n              });\n            }\n          });\n          this.props.state.filmovi.map(f => {\n            if (f.id == projekcija.film) {\n              this.setState({\n                film: f.naziv\n              });\n            }\n          });\n          alert(\"Uspesno ste dodali projekciju!\");\n        } else if (res.result === \"error\") {\n          alert(\"Datum i vreme prikazivanja projekcije su vec rezervisani!\");\n        }\n      });\n    }\n  }\n\n  componentDidMount() {\n    const conf = {\n      headers: new Headers({\n        'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n      }, {\n        'Access-Control-Allow-Methods': 'GET'\n      })\n    };\n    fetch('http://localhost:8080/bioskop/sale', conf).then(res => res.json()).then(response => {\n      this.setState({\n        sale: response,\n        saleZaIzbor: response\n      });\n    });\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n\n    if (name === \"datumVremePrikazivanja\") {\n      const curentDateTime = new Date();\n      const rezervacjija = new Date(value);\n\n      if (curentDateTime > rezervacjija) {\n        alert(\"Vreme prikazivanje projekcije ne sme biti u proslosti!\");\n      } else {\n        this.setState({\n          [name]: value\n        });\n      }\n    } else if (name === \"sala\") {\n      if (value == \"\") {\n        this.setState({\n          tipoviZaIzbor: [\"2D\", \"3D\", \"4D\"]\n        });\n      } else {\n        this.state.sale.map(s => {\n          if (s.id == value) {\n            const tipovi = s.tip.split(\" \").filter(i => i != \"\");\n            this.setState({\n              tipoviZaIzbor: tipovi\n            });\n          }\n        });\n      }\n\n      this.setState({\n        [name]: value\n      });\n    } else if (name === \"tipProjekcije\") {\n      if (value === \"\") {\n        this.setState({\n          saleZaIzbor: this.state.sale\n        });\n      } else {\n        this.setState({});\n        var filterSale = [];\n        this.state.sale.map(s => {\n          if (s.tip.includes(value)) {\n            filterSale.push(s);\n          }\n        });\n        this.setState({\n          saleZaIzbor: filterSale\n        });\n      }\n\n      this.setState({\n        [name]: value\n      });\n    } else {\n      this.setState({\n        [name]: value\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"NovaProjekcija\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NovaProjekcijaForm, {\n      state: this.state,\n      handleChange: this.handleChange,\n      filmovi: this.props.state.filmovi,\n      handleSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, this.state.film, \" \", this.state.tipProjekcije, \" \", this.state.sala, \" \", this.state.cenaKarte, \" \", this.state.datumVremePrikazivanja));\n  }\n\n}\n\nexport default NovaProjekcija;","map":{"version":3,"sources":["C:/Users/Dejan/Documents/resources/src/NovaProjekcija.jsx"],"names":["React","NovaProjekcijaForm","NovaProjekcija","Component","constructor","state","film","datumVremePrikazivanja","tipProjekcije","sala","cenaKarte","sale","saleZaIzbor","tipoviZaIzbor","id","handleSubmit","bind","handleChange","e","preventDefault","alert","projekcija","napravio","props","logedUsername","console","log","JSON","stringify","config","dataType","contentType","method","headers","localStorage","getItem","body","fetch","then","res","json","result","map","s","setState","datum","naziv","filmovi","f","componentDidMount","conf","Headers","response","event","name","value","target","curentDateTime","Date","rezervacjija","tipovi","tip","split","filter","i","filterSale","includes","push","render"],"mappings":"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","sourcesContent":["import React from \"react\"\r\n\r\nimport NovaProjekcijaForm from \"./NovaProjekcijaForm\"\r\n\r\nclass NovaProjekcija extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            film:\"\",\r\n            datumVremePrikazivanja:\"\",\r\n            tipProjekcije:\"\",\r\n            sala:\"\",\r\n            cenaKarte:\"\",\r\n            sale:[],\r\n            saleZaIzbor:[],\r\n            tipoviZaIzbor:[\"2D\", \"3D\", \"4D\"],\r\n            id:\"\"\r\n        }\r\n        this.handleSubmit=this.handleSubmit.bind(this)\r\n        this.handleChange=this.handleChange.bind(this)\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const {film,datumVremePrikazivanja,tipProjekcije,sala,cenaKarte}=this.state\r\n        if(film === \"\" || datumVremePrikazivanja === \"\" || tipProjekcije === \"\" || sala === \"\" || cenaKarte === \"\"){\r\n            alert(\"Sva polja moraju biti popunjena!\")\r\n        }else{\r\n            const projekcija={\r\n                film:this.state.film,\r\n                tipProjekcije:this.state.tipProjekcije,\r\n                sala:this.state.sala,\r\n                cenaKarte:this.state.cenaKarte,\r\n                napravio: this.props.state.logedUsername,\r\n                datumVremePrikazivanja:this.state.datumVremePrikazivanja\r\n            }\r\n            console.log(JSON.stringify(projekcija))\r\n    \r\n            var config={\r\n                dataType: 'json',\r\n                contentType:\"application/json; charset=utf-8\",\r\n                method: 'post',\r\n                headers: {'Authorization': 'Bearer ' + localStorage.getItem('jwt')},\r\n                body: JSON.stringify(projekcija)\r\n              };\r\n    \r\n            // On submit of the form, send a POST request with the data to the server.\r\n            fetch('http://localhost:8080/bioskop/projekcije/add',config)\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res)\r\n                    if(res.result===\"success\"){\r\n                        this.state.sale.map(s => {\r\n                            if(s.id == projekcija.sala){\r\n                                this.setState({\r\n                                    id:res.id,\r\n                                    datumVremePrikazivanja:res.datum,\r\n                                    sala:s.naziv\r\n                                })\r\n                            }\r\n                        })\r\n                        this.props.state.filmovi.map(f => {\r\n                            if(f.id == projekcija.film){\r\n                                this.setState({\r\n                                    film:f.naziv\r\n                                })\r\n                            }\r\n                        })\r\n                        alert(\"Uspesno ste dodali projekciju!\")\r\n                    }else if(res.result===\"error\"){\r\n                        alert(\"Datum i vreme prikazivanja projekcije su vec rezervisani!\")\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        const conf={\r\n            headers: new Headers({'Authorization': 'Bearer ' + localStorage.getItem('jwt')},\r\n                                  {'Access-Control-Allow-Methods':'GET'}),\r\n          };\r\n        fetch('http://localhost:8080/bioskop/sale',conf)\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                this.setState({\r\n                    sale: response,\r\n                    saleZaIzbor: response\r\n            })\r\n        })\r\n    }\r\n\r\n    handleChange(event){\r\n        const {name,value} = event.target\r\n        if(name === \"datumVremePrikazivanja\"){\r\n            const curentDateTime=new Date()\r\n            const rezervacjija=new Date(value)\r\n            if(curentDateTime>rezervacjija){\r\n                alert(\"Vreme prikazivanje projekcije ne sme biti u proslosti!\")\r\n            }else{\r\n                this.setState({\r\n                    [name]:value\r\n                })\r\n            }\r\n        }else if(name === \"sala\"){\r\n            if(value == \"\"){\r\n                this.setState({\r\n                    tipoviZaIzbor: [\"2D\", \"3D\", \"4D\"]\r\n                })\r\n            }else{\r\n                this.state.sale.map(s => {\r\n                    if(s.id==value){\r\n                        const tipovi=s.tip.split(\" \").filter(i => i != \"\")\r\n                        this.setState({\r\n                            tipoviZaIzbor:tipovi\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n            this.setState({\r\n                [name]:value\r\n            })\r\n        }else if(name === \"tipProjekcije\"){\r\n            if(value === \"\"){\r\n                this.setState({saleZaIzbor:this.state.sale})\r\n            }else{\r\n                this.setState({\r\n\r\n                })\r\n                var filterSale=[]\r\n                this.state.sale.map(s => {\r\n                if(s.tip.includes(value)){\r\n                    filterSale.push(s)\r\n                }\r\n                })\r\n                this.setState({saleZaIzbor:filterSale})\r\n            }\r\n            this.setState({\r\n                [name]:value\r\n            })\r\n        }else{\r\n            this.setState({\r\n                [name]:value\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"NovaProjekcija\">\r\n                <NovaProjekcijaForm state={this.state} handleChange={this.handleChange} filmovi={this.props.state.filmovi} handleSubmit={this.handleSubmit}/>\r\n                <h1>{this.state.film} {this.state.tipProjekcije} {this.state.sala} {this.state.cenaKarte} {this.state.datumVremePrikazivanja}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NovaProjekcija"]},"metadata":{},"sourceType":"module"}