{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dejan\\\\Documents\\\\resources\\\\src\\\\NovaProjekcija.jsx\";\nimport React from \"react\";\nimport NovaProjekcijaForm from \"./NovaProjekcijaForm\";\n\nclass NovaProjekcija extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      film: \"\",\n      datumVremePrikazivanja: \"\",\n      tipProjekcije: \"\",\n      sala: \"\",\n      cenaKarte: \"\",\n      sale: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleSubmit() {\n    const {\n      film,\n      datumVremePrikazivanja,\n      tipProjekcije,\n      sala,\n      cenaKarte\n    } = this.state;\n\n    if (film === \"\" || datumVremePrikazivanja === \"\" || tipProjekcije === \"\" || sala === \"\" || cenaKarte === \"\") {\n      alert(\"Sva polja moraju biti popunjena!\");\n    } else {\n      const projekcija = {\n        film: this.state.film,\n        datumVremePrikazivanja: this.state.datumVremePrikazivanja,\n        tipProjekcije: this.state.tipProjekcije,\n        sala: this.state.sala,\n        cenaKarte: this.state.cenaKarte,\n        napravio: this.props.state.logedUsername\n      };\n      var config = {\n        dataType: 'json',\n        contentType: \"application/json; charset=utf-8\",\n        method: 'post',\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n        },\n        body: JSON.stringify(this.state)\n      }; // On submit of the form, send a POST request with the data to the server.\n\n      fetch('http://localhost:8080/bioskop/projekcije/add', config).then(res => res.json()).then(res => this.props.handleToUpdateAdd(res));\n    }\n  }\n\n  componentDidMount() {\n    const conf = {\n      headers: new Headers({\n        'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n      }, {\n        'Access-Control-Allow-Methods': 'GET'\n      })\n    };\n    fetch('http://localhost:8080/bioskop/sale', conf).then(res => res.json()).then(response => {\n      this.setState({\n        sale: response\n      });\n    });\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    console.log(name + \" \" + JSON.stringify(value));\n\n    if (name === \"film\") {\n      this.props.state.filmovi.map(f => {\n        if (f.id == value) {\n          this.setState({\n            film: f\n          });\n        }\n      });\n    } else if (name === \"sala\") {\n      this.state.sale.map(s => {\n        if (s.id == value) {\n          this.setState({\n            sala: s\n          });\n        }\n      });\n    } else if (name === \"datumVremePrikazivanja\") {\n      const curentDateTime = new Date();\n      const rezervacjija = new Date(value);\n\n      if (curentDateTime > rezervacjija) {\n        alert(\"Vreme prikazivanje projekcije ne sme biti u proslosti!\");\n      } else {\n        this.setState({\n          [name]: value\n        });\n      }\n    } else {\n      console.log(\"U else sam!\");\n      this.setState({\n        [name]: value\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"NovaProjekcija\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NovaProjekcijaForm, {\n      state: this.state,\n      handleChange: this.handleChange,\n      filmovi: this.props.state.filmovi,\n      handleSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, this.state.film.naziv, \" \", this.state.tipProjekcije, \" \", this.state.sala.naziv, this.state.datumVremePrikazivanja, \" \", this.state.cenaKarte, \" \", this.state.napravio));\n  }\n\n}\n\nexport default NovaProjekcija;","map":{"version":3,"sources":["C:/Users/Dejan/Documents/resources/src/NovaProjekcija.jsx"],"names":["React","NovaProjekcijaForm","NovaProjekcija","Component","constructor","state","film","datumVremePrikazivanja","tipProjekcije","sala","cenaKarte","sale","handleSubmit","bind","handleChange","alert","projekcija","napravio","props","logedUsername","config","dataType","contentType","method","headers","localStorage","getItem","body","JSON","stringify","fetch","then","res","json","handleToUpdateAdd","componentDidMount","conf","Headers","response","setState","event","name","value","target","console","log","filmovi","map","f","id","s","curentDateTime","Date","rezervacjija","render","naziv"],"mappings":"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","sourcesContent":["import React from \"react\"\r\n\r\nimport NovaProjekcijaForm from \"./NovaProjekcijaForm\"\r\n\r\nclass NovaProjekcija extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            film:\"\",\r\n            datumVremePrikazivanja:\"\",\r\n            tipProjekcije:\"\",\r\n            sala:\"\",\r\n            cenaKarte:\"\",\r\n            sale:[]\r\n        }\r\n        this.handleSubmit=this.handleSubmit.bind(this)\r\n        this.handleChange=this.handleChange.bind(this)\r\n    }\r\n\r\n    handleSubmit(){\r\n        const {film,datumVremePrikazivanja,tipProjekcije,sala,cenaKarte}=this.state\r\n        if(film === \"\" || datumVremePrikazivanja === \"\" || tipProjekcije === \"\" || sala === \"\" || cenaKarte === \"\"){\r\n            alert(\"Sva polja moraju biti popunjena!\")\r\n        }else{\r\n            const projekcija={\r\n                film:this.state.film,\r\n                datumVremePrikazivanja:this.state.datumVremePrikazivanja,\r\n                tipProjekcije:this.state.tipProjekcije,\r\n                sala:this.state.sala,\r\n                cenaKarte:this.state.cenaKarte,\r\n                napravio: this.props.state.logedUsername\r\n            }\r\n    \r\n            var config={\r\n                dataType: 'json',\r\n                contentType:\"application/json; charset=utf-8\",\r\n                method: 'post',\r\n                headers: {'Authorization': 'Bearer ' + localStorage.getItem('jwt')},\r\n                body: JSON.stringify(this.state)\r\n              };\r\n    \r\n            // On submit of the form, send a POST request with the data to the server.\r\n            fetch('http://localhost:8080/bioskop/projekcije/add',config)\r\n                .then(res => res.json())\r\n                .then(res => this.props.handleToUpdateAdd(res))\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        const conf={\r\n            headers: new Headers({'Authorization': 'Bearer ' + localStorage.getItem('jwt')},\r\n                                  {'Access-Control-Allow-Methods':'GET'}),\r\n          };\r\n        fetch('http://localhost:8080/bioskop/sale',conf)\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                this.setState({\r\n                    sale: response\r\n            })\r\n        })\r\n    }\r\n\r\n    handleChange(event){\r\n        const {name,value} = event.target\r\n        console.log(name+\" \"+JSON.stringify(value))\r\n        if(name === \"film\"){\r\n            this.props.state.filmovi.map(f => {\r\n                if(f.id == value){\r\n                    this.setState({film:f})\r\n                }\r\n            })\r\n        }else if(name === \"sala\"){\r\n            this.state.sale.map(s => {\r\n                if(s.id == value){\r\n                    this.setState({sala:s})\r\n                }\r\n            })\r\n        }else if(name === \"datumVremePrikazivanja\"){\r\n            const curentDateTime=new Date()\r\n            const rezervacjija=new Date(value)\r\n            if(curentDateTime>rezervacjija){\r\n                alert(\"Vreme prikazivanje projekcije ne sme biti u proslosti!\")\r\n            }else{\r\n                this.setState({\r\n                    [name]:value\r\n                })\r\n            }\r\n        }else{\r\n            console.log(\"U else sam!\")\r\n            this.setState({\r\n                [name]:value\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"NovaProjekcija\">\r\n                <NovaProjekcijaForm state={this.state} handleChange={this.handleChange} filmovi={this.props.state.filmovi} handleSubmit={this.handleSubmit}/>\r\n                <h1>{this.state.film.naziv} {this.state.tipProjekcije} {this.state.sala.naziv}\r\n                 {this.state.datumVremePrikazivanja} {this.state.cenaKarte} {this.state.napravio}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NovaProjekcija"]},"metadata":{},"sourceType":"module"}