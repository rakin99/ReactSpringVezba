{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dejan\\\\Documents\\\\resources\\\\src\\\\NovaProjekcija.jsx\";\nimport React from \"react\";\nimport NovaProjekcijaForm from \"./NovaProjekcijaForm\";\nimport $ from \"jquery\";\n\nclass NovaProjekcija extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      film: \"\",\n      datumVremePrikazivanja: \"\",\n      tipProjekcije: \"\",\n      sala: \"\",\n      cenaKarte: \"\",\n      sale: [],\n      saleZaIzbor: [],\n      tipoviZaIzbor: [\"2D\", \"3D\", \"4D\"],\n      id: \"\",\n      napravio: \"\",\n      filmovi: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.cancel = this.cancel.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const {\n      film,\n      datumVremePrikazivanja,\n      tipProjekcije,\n      sala,\n      cenaKarte\n    } = this.state;\n\n    if (film === \"\" || datumVremePrikazivanja === \"\" || tipProjekcije === \"\" || sala === \"\" || cenaKarte === \"\") {\n      alert(\"Sva polja moraju biti popunjena!\");\n    } else if (this.state.datumVremePrikazivanja < new Date()) {\n      alert(\"--Vreme prikazivanja ne sme biti u poslosti!--\");\n    } else {\n      const projekcija = {\n        film: this.state.film,\n        tipProjekcije: this.state.tipProjekcije,\n        sala: this.state.sala,\n        cenaKarte: this.state.cenaKarte,\n        napravio: this.props.state.logedUsername,\n        datumVremePrikazivanja: this.state.datumVremePrikazivanja\n      };\n      console.log(JSON.stringify(projekcija));\n      var config = {\n        dataType: 'json',\n        contentType: \"application/json; charset=utf-8\",\n        method: 'post',\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n        },\n        body: JSON.stringify(projekcija)\n      }; // On submit of the form, send a POST request with the data to the server.\n\n      fetch('http://localhost:8080/bioskop/projekcije/add', config).then(res => res.json()).then(res => {\n        console.log(res);\n\n        if (res.result === \"success\") {\n          this.state.sale.map(s => {\n            if (s.id == projekcija.sala) {\n              this.setState({\n                id: res.id,\n                datumVremePrikazivanja: res.datum,\n                sala: s.naziv,\n                napravio: this.props.state.logedUsername\n              });\n            }\n          });\n          this.props.state.filmovi.map(f => {\n            if (f.id == projekcija.film) {\n              this.setState({\n                film: f.naziv\n              });\n            }\n          });\n          const novaProjekcija = {\n            id: this.state.id,\n            film: this.state.film,\n            tipProjekcije: this.state.tipProjekcije,\n            sala: this.state.sala,\n            cenaKarte: this.state.cenaKarte,\n            napravio: this.props.state.logedUsername,\n            datumVremePrikazivanja: this.state.datumVremePrikazivanja\n          };\n          this.setState({\n            film: \"\",\n            datumVremePrikazivanja: \"\",\n            tipProjekcije: \"\",\n            sala: \"\",\n            cenaKarte: \"\",\n            id: \"\",\n            napravio: \"\"\n          });\n          this.props.handleToUpdateAddProjekcije(novaProjekcija);\n          this.cancel();\n          alert(\"Uspesno ste dodali projekciju!\");\n        } else if (res.result === \"error\") {\n          alert(\"Datum i vreme prikazivanja projekcije su vec rezervisani!\");\n        }\n      });\n    }\n  }\n\n  cancel() {\n    this.props.setTrue();\n    $('#idProjekcije').remove();\n    $('#NovaProjekcija').hide();\n  }\n\n  componentDidMount() {\n    const conf = {\n      headers: new Headers({\n        'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n      }, {\n        'Access-Control-Allow-Methods': 'GET'\n      })\n    };\n    fetch('http://localhost:8080/bioskop/sale', conf).then(res => res.json()).then(response => {\n      this.setState({\n        sale: response,\n        saleZaIzbor: response,\n        filmovi: this.props.state.filmovi\n      });\n    });\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n\n    if (name === \"datumVremePrikazivanja\") {\n      const curentDateTime = new Date();\n      const rezervacjija = new Date(value);\n\n      if (curentDateTime > rezervacjija) {\n        alert(\"Vreme prikazivanje projekcije ne sme biti u proslosti!\");\n      } else {\n        this.setState({\n          [name]: value\n        });\n      }\n    } else if (name === \"sala\") {\n      if (value == \"\") {\n        this.setState({\n          tipoviZaIzbor: [\"2D\", \"3D\", \"4D\"]\n        });\n      } else {\n        this.state.sale.map(s => {\n          if (s.id == value) {\n            const tipovi = s.tip.split(\" \").filter(i => i != \"\");\n            this.setState({\n              tipoviZaIzbor: tipovi\n            });\n          }\n        });\n      }\n\n      this.setState({\n        [name]: value\n      });\n    } else if (name === \"tipProjekcije\") {\n      if (value === \"\") {\n        this.setState({\n          saleZaIzbor: this.state.sale\n        });\n      } else {\n        this.setState({});\n        var filterSale = [];\n        this.state.sale.map(s => {\n          if (s.tip.includes(value)) {\n            filterSale.push(s);\n          }\n        });\n        this.setState({\n          saleZaIzbor: filterSale\n        });\n      }\n\n      this.setState({\n        [name]: value\n      });\n    } else {\n      this.setState({\n        [name]: value\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"NovaProjekcija\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NovaProjekcijaForm, {\n      state: this.state,\n      handleChange: this.handleChange,\n      filmovi: this.state.filmovi,\n      handleSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }), JSON.stringify(this.state.film), \" \", JSON.stringify(this.state.tipProjekcije), \" \", JSON.stringify(this.state.sala), JSON.stringify(this.state.cenaKarte), \" \", JSON.stringify(this.state.datumVremePrikazivanja));\n  }\n\n}\n\nexport default NovaProjekcija;","map":{"version":3,"sources":["C:/Users/Dejan/Documents/resources/src/NovaProjekcija.jsx"],"names":["React","NovaProjekcijaForm","$","NovaProjekcija","Component","constructor","state","film","datumVremePrikazivanja","tipProjekcije","sala","cenaKarte","sale","saleZaIzbor","tipoviZaIzbor","id","napravio","filmovi","handleSubmit","bind","handleChange","cancel","e","preventDefault","alert","Date","projekcija","props","logedUsername","console","log","JSON","stringify","config","dataType","contentType","method","headers","localStorage","getItem","body","fetch","then","res","json","result","map","s","setState","datum","naziv","f","novaProjekcija","handleToUpdateAddProjekcije","setTrue","remove","hide","componentDidMount","conf","Headers","response","event","name","value","target","curentDateTime","rezervacjija","tipovi","tip","split","filter","i","filterSale","includes","push","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,cAAN,SAA6BH,KAAK,CAACI,SAAnC,CAA4C;AACxCC,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAC,EADI;AAETC,MAAAA,sBAAsB,EAAC,EAFd;AAGTC,MAAAA,aAAa,EAAC,EAHL;AAITC,MAAAA,IAAI,EAAC,EAJI;AAKTC,MAAAA,SAAS,EAAC,EALD;AAMTC,MAAAA,IAAI,EAAC,EANI;AAOTC,MAAAA,WAAW,EAAC,EAPH;AAQTC,MAAAA,aAAa,EAAC,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CARL;AASTC,MAAAA,EAAE,EAAC,EATM;AAUTC,MAAAA,QAAQ,EAAC,EAVA;AAWTC,MAAAA,OAAO,EAAC;AAXC,KAAb;AAaA,SAAKC,YAAL,GAAkB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAlB;AACA,SAAKC,YAAL,GAAkB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAAlB;AACA,SAAKE,MAAL,GAAY,KAAKA,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAAZ;AACH;;AAEDD,EAAAA,YAAY,CAACI,CAAD,EAAG;AACXA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAM;AAAChB,MAAAA,IAAD;AAAMC,MAAAA,sBAAN;AAA6BC,MAAAA,aAA7B;AAA2CC,MAAAA,IAA3C;AAAgDC,MAAAA;AAAhD,QAA2D,KAAKL,KAAtE;;AACA,QAAGC,IAAI,KAAK,EAAT,IAAeC,sBAAsB,KAAK,EAA1C,IAAgDC,aAAa,KAAK,EAAlE,IAAwEC,IAAI,KAAK,EAAjF,IAAuFC,SAAS,KAAK,EAAxG,EAA2G;AACvGa,MAAAA,KAAK,CAAC,kCAAD,CAAL;AACH,KAFD,MAGK,IAAG,KAAKlB,KAAL,CAAWE,sBAAX,GAAoC,IAAIiB,IAAJ,EAAvC,EAAkD;AACnDD,MAAAA,KAAK,CAAC,gDAAD,CAAL;AACH,KAFI,MAEA;AACD,YAAME,UAAU,GAAC;AACbnB,QAAAA,IAAI,EAAC,KAAKD,KAAL,CAAWC,IADH;AAEbE,QAAAA,aAAa,EAAC,KAAKH,KAAL,CAAWG,aAFZ;AAGbC,QAAAA,IAAI,EAAC,KAAKJ,KAAL,CAAWI,IAHH;AAIbC,QAAAA,SAAS,EAAC,KAAKL,KAAL,CAAWK,SAJR;AAKbK,QAAAA,QAAQ,EAAE,KAAKW,KAAL,CAAWrB,KAAX,CAAiBsB,aALd;AAMbpB,QAAAA,sBAAsB,EAAC,KAAKF,KAAL,CAAWE;AANrB,OAAjB;AAQAqB,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeN,UAAf,CAAZ;AAEA,UAAIO,MAAM,GAAC;AACPC,QAAAA,QAAQ,EAAE,MADH;AAEPC,QAAAA,WAAW,EAAC,iCAFL;AAGPC,QAAAA,MAAM,EAAE,MAHD;AAIPC,QAAAA,OAAO,EAAE;AAAC,2BAAiB,YAAYC,YAAY,CAACC,OAAb,CAAqB,KAArB;AAA9B,SAJF;AAKPC,QAAAA,IAAI,EAAET,IAAI,CAACC,SAAL,CAAeN,UAAf;AALC,OAAX,CAXC,CAmBD;;AACAe,MAAAA,KAAK,CAAC,8CAAD,EAAgDR,MAAhD,CAAL,CACKS,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUC,GAAG,IAAI;AACTd,QAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;;AACA,YAAGA,GAAG,CAACE,MAAJ,KAAa,SAAhB,EAA0B;AACtB,eAAKvC,KAAL,CAAWM,IAAX,CAAgBkC,GAAhB,CAAoBC,CAAC,IAAI;AACrB,gBAAGA,CAAC,CAAChC,EAAF,IAAQW,UAAU,CAAChB,IAAtB,EAA2B;AACvB,mBAAKsC,QAAL,CAAc;AACVjC,gBAAAA,EAAE,EAAC4B,GAAG,CAAC5B,EADG;AAEVP,gBAAAA,sBAAsB,EAACmC,GAAG,CAACM,KAFjB;AAGVvC,gBAAAA,IAAI,EAACqC,CAAC,CAACG,KAHG;AAIVlC,gBAAAA,QAAQ,EAAC,KAAKW,KAAL,CAAWrB,KAAX,CAAiBsB;AAJhB,eAAd;AAMH;AACJ,WATD;AAUA,eAAKD,KAAL,CAAWrB,KAAX,CAAiBW,OAAjB,CAAyB6B,GAAzB,CAA6BK,CAAC,IAAI;AAC9B,gBAAGA,CAAC,CAACpC,EAAF,IAAQW,UAAU,CAACnB,IAAtB,EAA2B;AACvB,mBAAKyC,QAAL,CAAc;AACVzC,gBAAAA,IAAI,EAAC4C,CAAC,CAACD;AADG,eAAd;AAGH;AACJ,WAND;AAOA,gBAAME,cAAc,GAAC;AACjBrC,YAAAA,EAAE,EAAC,KAAKT,KAAL,CAAWS,EADG;AAEjBR,YAAAA,IAAI,EAAC,KAAKD,KAAL,CAAWC,IAFC;AAGjBE,YAAAA,aAAa,EAAC,KAAKH,KAAL,CAAWG,aAHR;AAIjBC,YAAAA,IAAI,EAAC,KAAKJ,KAAL,CAAWI,IAJC;AAKjBC,YAAAA,SAAS,EAAC,KAAKL,KAAL,CAAWK,SALJ;AAMjBK,YAAAA,QAAQ,EAAE,KAAKW,KAAL,CAAWrB,KAAX,CAAiBsB,aANV;AAOjBpB,YAAAA,sBAAsB,EAAC,KAAKF,KAAL,CAAWE;AAPjB,WAArB;AASA,eAAKwC,QAAL,CAAc;AACVzC,YAAAA,IAAI,EAAC,EADK;AAEVC,YAAAA,sBAAsB,EAAC,EAFb;AAGVC,YAAAA,aAAa,EAAC,EAHJ;AAIVC,YAAAA,IAAI,EAAC,EAJK;AAKVC,YAAAA,SAAS,EAAC,EALA;AAMVI,YAAAA,EAAE,EAAC,EANO;AAOVC,YAAAA,QAAQ,EAAC;AAPC,WAAd;AASA,eAAKW,KAAL,CAAW0B,2BAAX,CAAuCD,cAAvC;AACA,eAAK/B,MAAL;AACAG,UAAAA,KAAK,CAAC,gCAAD,CAAL;AAEH,SAxCD,MAwCM,IAAGmB,GAAG,CAACE,MAAJ,KAAa,OAAhB,EAAwB;AAC1BrB,UAAAA,KAAK,CAAC,2DAAD,CAAL;AACH;AACJ,OA/CL;AAgDH;AACJ;;AAEDH,EAAAA,MAAM,GAAE;AACJ,SAAKM,KAAL,CAAW2B,OAAX;AACApD,IAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBqD,MAAnB;AACArD,IAAAA,CAAC,CAAC,iBAAD,CAAD,CAAqBsD,IAArB;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AAEf,UAAMC,IAAI,GAAC;AACPrB,MAAAA,OAAO,EAAE,IAAIsB,OAAJ,CAAY;AAAC,yBAAiB,YAAYrB,YAAY,CAACC,OAAb,CAAqB,KAArB;AAA9B,OAAZ,EACa;AAAC,wCAA+B;AAAhC,OADb;AADF,KAAX;AAIAE,IAAAA,KAAK,CAAC,oCAAD,EAAsCiB,IAAtC,CAAL,CACKhB,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUkB,QAAQ,IAAI;AACd,WAAKZ,QAAL,CAAc;AACVpC,QAAAA,IAAI,EAAEgD,QADI;AAEV/C,QAAAA,WAAW,EAAE+C,QAFH;AAGV3C,QAAAA,OAAO,EAAC,KAAKU,KAAL,CAAWrB,KAAX,CAAiBW;AAHf,OAAd;AAKP,KARD;AASH;;AAEDG,EAAAA,YAAY,CAACyC,KAAD,EAAO;AACf,UAAM;AAACC,MAAAA,IAAD;AAAMC,MAAAA;AAAN,QAAeF,KAAK,CAACG,MAA3B;;AACA,QAAGF,IAAI,KAAK,wBAAZ,EAAqC;AACjC,YAAMG,cAAc,GAAC,IAAIxC,IAAJ,EAArB;AACA,YAAMyC,YAAY,GAAC,IAAIzC,IAAJ,CAASsC,KAAT,CAAnB;;AACA,UAAGE,cAAc,GAACC,YAAlB,EAA+B;AAC3B1C,QAAAA,KAAK,CAAC,wDAAD,CAAL;AACH,OAFD,MAEK;AACD,aAAKwB,QAAL,CAAc;AACV,WAACc,IAAD,GAAOC;AADG,SAAd;AAGH;AACJ,KAVD,MAUM,IAAGD,IAAI,KAAK,MAAZ,EAAmB;AACrB,UAAGC,KAAK,IAAI,EAAZ,EAAe;AACX,aAAKf,QAAL,CAAc;AACVlC,UAAAA,aAAa,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb;AADL,SAAd;AAGH,OAJD,MAIK;AACD,aAAKR,KAAL,CAAWM,IAAX,CAAgBkC,GAAhB,CAAoBC,CAAC,IAAI;AACrB,cAAGA,CAAC,CAAChC,EAAF,IAAMgD,KAAT,EAAe;AACX,kBAAMI,MAAM,GAACpB,CAAC,CAACqB,GAAF,CAAMC,KAAN,CAAY,GAAZ,EAAiBC,MAAjB,CAAwBC,CAAC,IAAIA,CAAC,IAAI,EAAlC,CAAb;AACA,iBAAKvB,QAAL,CAAc;AACVlC,cAAAA,aAAa,EAACqD;AADJ,aAAd;AAGH;AACJ,SAPD;AAQH;;AACD,WAAKnB,QAAL,CAAc;AACV,SAACc,IAAD,GAAOC;AADG,OAAd;AAGH,KAlBK,MAkBA,IAAGD,IAAI,KAAK,eAAZ,EAA4B;AAC9B,UAAGC,KAAK,KAAK,EAAb,EAAgB;AACZ,aAAKf,QAAL,CAAc;AAACnC,UAAAA,WAAW,EAAC,KAAKP,KAAL,CAAWM;AAAxB,SAAd;AACH,OAFD,MAEK;AACD,aAAKoC,QAAL,CAAc,EAAd;AAGA,YAAIwB,UAAU,GAAC,EAAf;AACA,aAAKlE,KAAL,CAAWM,IAAX,CAAgBkC,GAAhB,CAAoBC,CAAC,IAAI;AACzB,cAAGA,CAAC,CAACqB,GAAF,CAAMK,QAAN,CAAeV,KAAf,CAAH,EAAyB;AACrBS,YAAAA,UAAU,CAACE,IAAX,CAAgB3B,CAAhB;AACH;AACA,SAJD;AAKA,aAAKC,QAAL,CAAc;AAACnC,UAAAA,WAAW,EAAC2D;AAAb,SAAd;AACH;;AACD,WAAKxB,QAAL,CAAc;AACV,SAACc,IAAD,GAAOC;AADG,OAAd;AAGH,KAlBK,MAkBD;AACD,WAAKf,QAAL,CAAc;AACV,SAACc,IAAD,GAAOC;AADG,OAAd;AAGH;AACJ;;AAEDY,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,EAAE,EAAC,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,kBAAD;AAAoB,MAAA,KAAK,EAAE,KAAKrE,KAAhC;AAAuC,MAAA,YAAY,EAAE,KAAKc,YAA1D;AAAwE,MAAA,OAAO,EAAE,KAAKd,KAAL,CAAWW,OAA5F;AAAqG,MAAA,YAAY,EAAE,KAAKC,YAAxH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEKa,IAAI,CAACC,SAAL,CAAe,KAAK1B,KAAL,CAAWC,IAA1B,CAFL,OAEuCwB,IAAI,CAACC,SAAL,CAAe,KAAK1B,KAAL,CAAWG,aAA1B,CAFvC,OAEkFsB,IAAI,CAACC,SAAL,CAAe,KAAK1B,KAAL,CAAWI,IAA1B,CAFlF,EAGKqB,IAAI,CAACC,SAAL,CAAe,KAAK1B,KAAL,CAAWK,SAA1B,CAHL,OAG4CoB,IAAI,CAACC,SAAL,CAAe,KAAK1B,KAAL,CAAWE,sBAA1B,CAH5C,CADJ;AAOH;;AA1LuC;;AA6L5C,eAAeL,cAAf","sourcesContent":["import React from \"react\"\r\n\r\nimport NovaProjekcijaForm from \"./NovaProjekcijaForm\"\r\n\r\nimport $ from \"jquery\"\r\n\r\nclass NovaProjekcija extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            film:\"\",\r\n            datumVremePrikazivanja:\"\",\r\n            tipProjekcije:\"\",\r\n            sala:\"\",\r\n            cenaKarte:\"\",\r\n            sale:[],\r\n            saleZaIzbor:[],\r\n            tipoviZaIzbor:[\"2D\", \"3D\", \"4D\"],\r\n            id:\"\",\r\n            napravio:\"\",\r\n            filmovi:[]\r\n        }\r\n        this.handleSubmit=this.handleSubmit.bind(this)\r\n        this.handleChange=this.handleChange.bind(this)\r\n        this.cancel=this.cancel.bind(this)\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const {film,datumVremePrikazivanja,tipProjekcije,sala,cenaKarte}=this.state\r\n        if(film === \"\" || datumVremePrikazivanja === \"\" || tipProjekcije === \"\" || sala === \"\" || cenaKarte === \"\"){\r\n            alert(\"Sva polja moraju biti popunjena!\")\r\n        }\r\n        else if(this.state.datumVremePrikazivanja < new Date()){\r\n            alert(\"--Vreme prikazivanja ne sme biti u poslosti!--\")\r\n        }else{\r\n            const projekcija={\r\n                film:this.state.film,\r\n                tipProjekcije:this.state.tipProjekcije,\r\n                sala:this.state.sala,\r\n                cenaKarte:this.state.cenaKarte,\r\n                napravio: this.props.state.logedUsername,\r\n                datumVremePrikazivanja:this.state.datumVremePrikazivanja\r\n            }\r\n            console.log(JSON.stringify(projekcija))\r\n    \r\n            var config={\r\n                dataType: 'json',\r\n                contentType:\"application/json; charset=utf-8\",\r\n                method: 'post',\r\n                headers: {'Authorization': 'Bearer ' + localStorage.getItem('jwt')},\r\n                body: JSON.stringify(projekcija)\r\n              };\r\n    \r\n            // On submit of the form, send a POST request with the data to the server.\r\n            fetch('http://localhost:8080/bioskop/projekcije/add',config)\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res)\r\n                    if(res.result===\"success\"){\r\n                        this.state.sale.map(s => {\r\n                            if(s.id == projekcija.sala){\r\n                                this.setState({\r\n                                    id:res.id,\r\n                                    datumVremePrikazivanja:res.datum,\r\n                                    sala:s.naziv,\r\n                                    napravio:this.props.state.logedUsername\r\n                                })\r\n                            }\r\n                        })\r\n                        this.props.state.filmovi.map(f => {\r\n                            if(f.id == projekcija.film){\r\n                                this.setState({\r\n                                    film:f.naziv\r\n                                })\r\n                            }\r\n                        })\r\n                        const novaProjekcija={\r\n                            id:this.state.id,\r\n                            film:this.state.film,\r\n                            tipProjekcije:this.state.tipProjekcije,\r\n                            sala:this.state.sala,\r\n                            cenaKarte:this.state.cenaKarte,\r\n                            napravio: this.props.state.logedUsername,\r\n                            datumVremePrikazivanja:this.state.datumVremePrikazivanja\r\n                        }\r\n                        this.setState({\r\n                            film:\"\",\r\n                            datumVremePrikazivanja:\"\",\r\n                            tipProjekcije:\"\",\r\n                            sala:\"\",\r\n                            cenaKarte:\"\",\r\n                            id:\"\",\r\n                            napravio:\"\",\r\n                        })\r\n                        this.props.handleToUpdateAddProjekcije(novaProjekcija)\r\n                        this.cancel()\r\n                        alert(\"Uspesno ste dodali projekciju!\")\r\n                        \r\n                    }else if(res.result===\"error\"){\r\n                        alert(\"Datum i vreme prikazivanja projekcije su vec rezervisani!\")\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    cancel(){\r\n        this.props.setTrue()\r\n        $('#idProjekcije').remove();\r\n        $('#NovaProjekcija').hide();\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        const conf={\r\n            headers: new Headers({'Authorization': 'Bearer ' + localStorage.getItem('jwt')},\r\n                                  {'Access-Control-Allow-Methods':'GET'}),\r\n          };\r\n        fetch('http://localhost:8080/bioskop/sale',conf)\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                this.setState({\r\n                    sale: response,\r\n                    saleZaIzbor: response,\r\n                    filmovi:this.props.state.filmovi\r\n            })\r\n        })\r\n    }\r\n\r\n    handleChange(event){\r\n        const {name,value} = event.target\r\n        if(name === \"datumVremePrikazivanja\"){\r\n            const curentDateTime=new Date()\r\n            const rezervacjija=new Date(value)\r\n            if(curentDateTime>rezervacjija){\r\n                alert(\"Vreme prikazivanje projekcije ne sme biti u proslosti!\")\r\n            }else{\r\n                this.setState({\r\n                    [name]:value\r\n                })\r\n            }\r\n        }else if(name === \"sala\"){\r\n            if(value == \"\"){\r\n                this.setState({\r\n                    tipoviZaIzbor: [\"2D\", \"3D\", \"4D\"]\r\n                })\r\n            }else{\r\n                this.state.sale.map(s => {\r\n                    if(s.id==value){\r\n                        const tipovi=s.tip.split(\" \").filter(i => i != \"\")\r\n                        this.setState({\r\n                            tipoviZaIzbor:tipovi\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n            this.setState({\r\n                [name]:value\r\n            })\r\n        }else if(name === \"tipProjekcije\"){\r\n            if(value === \"\"){\r\n                this.setState({saleZaIzbor:this.state.sale})\r\n            }else{\r\n                this.setState({\r\n\r\n                })\r\n                var filterSale=[]\r\n                this.state.sale.map(s => {\r\n                if(s.tip.includes(value)){\r\n                    filterSale.push(s)\r\n                }\r\n                })\r\n                this.setState({saleZaIzbor:filterSale})\r\n            }\r\n            this.setState({\r\n                [name]:value\r\n            })\r\n        }else{\r\n            this.setState({\r\n                [name]:value\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"NovaProjekcija\">\r\n                <NovaProjekcijaForm state={this.state} handleChange={this.handleChange} filmovi={this.state.filmovi} handleSubmit={this.handleSubmit}/>\r\n                {JSON.stringify(this.state.film)} {JSON.stringify(this.state.tipProjekcije)} {JSON.stringify(this.state.sala)}\r\n                {JSON.stringify(this.state.cenaKarte)} {JSON.stringify(this.state.datumVremePrikazivanja)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NovaProjekcija"]},"metadata":{},"sourceType":"module"}